# -*- coding: utf-8 -*-
"""GroundwaterAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NhDFrXCGLo_wiHW67YXULr7fkXXXT40T
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

rainfall = pd.read_csv('flood_gen.csv')
soil = pd.read_csv('erosion_data.csv')

print(rainfall.head())

print(soil.head())

# Extract the full state name from 'State' column
soil["FullName"] = soil["State"].str.replace("R_Factor_", "", regex=False).str.title()

# Define reverse mapping (full name → abbreviation)
abbrev_mapping = {
    "Andman": "AN",
    "Andhra": "AP",
    "Arunach": "AR",
    "Assam": "AS",
    "Bihar": "BR",
    "Chandigargh": "CH",
    "Chattisgarh": "CG",
    "DadraNagr": "DN",
    "DamanDiu": "DD",
    "Goa": "GA",
    "Gujarat": "GJ",
    "Haryana": "HR",
    "Himachal": "HP",
    "JammuKas": "JK",
    "Jharkhand": "JH",
    "Kaenataka": "KA",
    "Kerala": "KL",
    "LaksgDp": "LD",
    "MP": "MP",
    "Mahar": "MH",
    "Manipur": "MN",
    "Meghalaya": "ML",
    "Mizoram": "MZ",
    "Nagalnd": "NL",
    "NCDelhi": "DL",
    "Odisha": "OD",
    "Pudduchery": "PY",
    "Punjab": "PB",
    "Rajsthan": "RJ",
    "Sikkim": "SK",
    "Tamilnadu": "TN",
    "Telangana": "TG",
    "Tripura": "TR",
    "UP": "UP",
    "Uttarakhand": "UK",
    "WB": "WB"
}

# Map to abbreviation
soil["STATE"] = soil["FullName"].map(abbrev_mapping)

merged = pd.merge(rainfall, soil, on="STATE", how="inner")

print(merged.head())

import pandas as pd


merged.drop(columns=['FullName'], inplace=True)


merged.drop(columns=['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec'], inplace=True)


merged.fillna(merged.mean(), inplace=True)

# Normalize month columns (to make sure they're named consistently)
merged.rename(columns={'JAN': 'January', 'FEB': 'February', 'MAR': 'March',
                             'APR': 'April', 'MAY': 'May', 'JUN': 'June',
                             'JUL': 'July', 'AUG': 'August', 'SEP': 'September',
                             'OCT': 'October', 'NOV': 'November', 'DEC': 'December'}, inplace=True)

import pandas as pd

# Select only numeric columns for filling missing values
numeric_cols = merged.select_dtypes(include=['float64', 'int64']).columns

# Fill missing values in only the numeric columns
merged[numeric_cols] = merged[numeric_cols].fillna(merged[numeric_cols].mean())

# Check if any non-numeric columns are still present
merged.head()

# Drop the redundant 'State' column if it's duplicated
merged = merged.loc[:, ~merged.columns.duplicated()]
merged.drop(columns=['State'], inplace=True)

# Display the cleaned data
merged.head()


# Step 1: Calculate annual rainfall
merged['Annual Rainfall'] = merged[['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']].sum(axis=1)

# Step 2: Calculate groundwater recharge for each state (using a simple formula)
# Here we scale the R-factor by dividing it by 10000 and subtracting from 1 to simulate runoff effects
merged['Groundwater Recharge'] = merged['Annual Rainfall'] * (1 - merged['Avg R'] / 10000)

# Display the results
print(merged[['STATE', 'Annual Rainfall', 'Avg R', 'Groundwater Recharge']])

import matplotlib.pyplot as plt
import seaborn as sns

# Set the style
sns.set(style="whitegrid")

# 1. Annual Rainfall vs Groundwater Recharge
plt.figure(figsize=(8, 5))
sns.scatterplot(data=merged, x='Annual Rainfall', y='Groundwater Recharge', hue='STATE')
plt.title('Annual Rainfall vs Groundwater Recharge')
plt.xlabel('Annual Rainfall (mm)')
plt.ylabel('Groundwater Recharge')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# 2. Avg R vs Groundwater Recharge
plt.figure(figsize=(8, 5))
sns.scatterplot(data=merged, x='Avg R', y='Groundwater Recharge', hue='STATE')
plt.title('Average R Factor vs Groundwater Recharge')
plt.xlabel('Average R Factor')
plt.ylabel('Groundwater Recharge')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# 3. Combined Plot: Use size for one variable and color for another
plt.figure(figsize=(9, 6))
sns.scatterplot(
    data=merged,
    x='Annual Rainfall',
    y='Groundwater Recharge',
    size='Avg R',
    hue='STATE',
    sizes=(40, 400),
    palette='tab20'
)
plt.title('Rainfall, R Factor & Recharge (Bubble Plot)')
plt.xlabel('Annual Rainfall (mm)')
plt.ylabel('Groundwater Recharge')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

correlation = merged[['Annual Rainfall', 'Avg R', 'Groundwater Recharge']].corr()
print(correlation)
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Define features and target
X = merged[['Annual Rainfall']]
y = merged['Groundwater Recharge']

# Split into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("R² Score:", r2_score(y_test, y_pred))
import numpy as np
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Select features for clustering
cluster_data = merged[['Annual Rainfall', 'Avg R', 'Groundwater Recharge']]

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(cluster_data)

# Apply KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
merged['Cluster'] = kmeans.fit_predict(scaled_data)

# Visualize clusters (2D plot using first two features)
plt.figure(figsize=(10, 6))
sns.scatterplot(data=merged, x='Annual Rainfall', y='Groundwater Recharge', hue='Cluster', palette='Set2', s=100)
plt.title('KMeans Clustering of States')
plt.xlabel('Annual Rainfall')
plt.ylabel('Groundwater Recharge')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()

# Optional: View which state is in which cluster
print(merged[['STATE', 'Annual Rainfall', 'Avg R', 'Groundwater Recharge', 'Cluster']].sort_values(by='Cluster'))

merged.to_csv("groundwater_dataset.csv", index=False)
from google.colab import files
files.download("groundwater_dataset.csv")